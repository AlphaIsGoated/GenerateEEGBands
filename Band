import numpy as np
from scipy import signal
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
i = 1
filecount = 81
filefolder = "C:\\Downloads"
for i in range(1,filecount):
    files = ["C3","C4","Fp1","Fp2","Fz","O1","O2","P3","P4","Pz","T3","T4","T5","T6","Cz","F1","F2","F3","F4","F7","F8"]
    for x in files:
        pathname = filefolder+"\\EEG_data\\AD\\Eyes_closed\\Paciente"
        filename = str(i)+'\\'+x+'.txt'
        compPath = pathname+filename
       
        data = np.loadtxt(compPath)         
        sns.set(font_scale=1.2)
       
        # Define sampling frequency and time vector
        sf = 128.
        time = np.arange(data.size) / sf
        #=================================================================
        # Define delta lower and upper limits
        low, high = 0.5, 4
        cycles = 2
        # Define window length (4 seconds)
        win = (cycles/low) * sf
        freqs, psd = signal.welch(data, sf, nperseg=win)
    
        # Find intersecting values in frequency vector
        idx_delta = np.logical_and(freqs >= low, freqs <= high)
        from scipy.integrate import simps
        # Frequency resolution
        freq_res = freqs[1] - freqs[0]  # = 1 / 4 = 0.25
       
        # Compute the absolute power by approximating the area under the curve
        delta_power = simps(psd[idx_delta], dx=freq_res)
        #===================================================================
        # Define theta lower and upper limits
        low, high = 4, 8
        cycles = 2
        # Define window length (4 seconds)
        win = (cycles/low) * sf
        freqs, psd = signal.welch(data, sf, nperseg=win)
     
        # Find intersecting values in frequency vector
        idx_delta = np.logical_and(freqs >= low, freqs <= high)
        from scipy.integrate import simps
        # Frequency resolution
        freq_res = freqs[1] - freqs[0]  # = 1 / 4 = 0.25
        # Compute the absolute power by approximating the area under the curve
        theta_power = simps(psd[idx_delta], dx=freq_res)
        #===================================================================
        # Define alpha lower and upper limits
        low, high = 8, 12
        cycles = 2
        # Define window length (4 seconds)
        win = (cycles/low) * sf
        freqs, psd = signal.welch(data, sf, nperseg=win)
    
        # Find intersecting values in frequency vector
        idx_delta = np.logical_and(freqs >= low, freqs <= high)
        from scipy.integrate import simps
        # Frequency resolution
        freq_res = freqs[1] - freqs[0]  # = 1 / 4 = 0.25
        # Compute the absolute power by approximating the area under the curve
        alpha_power = simps(psd[idx_delta], dx=freq_res)
        #print(alpha_power)    
        #===================================================================
        # Define beta lower and upper limits
        low, high = 12, 30
        cycles = 2
        # Define window length (4 seconds)
        win = (cycles/low) * sf
        freqs, psd = signal.welch(data, sf, nperseg=win)
     
        # Find intersecting values in frequency vector
        idx_delta = np.logical_and(freqs >= low, freqs <= high)
        from scipy.integrate import simps
        # Frequency resolution
        freq_res = freqs[1] - freqs[0]  # = 1 / 4 = 0.25
        # Compute the absolute power by approximating the area under the curve
        beta_power = simps(psd[idx_delta], dx=freq_res)
        #===================================================================
        # Define gamma lower and upper limits
        low, high = 30, 100
        cycles = 2
        # Define window length (4 seconds)
        win = (cycles/low) * sf
        freqs, psd = signal.welch(data, sf, nperseg=win)
    
        # Find intersecting values in frequency vector
        idx_delta = np.logical_and(freqs >= low, freqs <= high)
        from scipy.integrate import simps
        # Frequency resolution
        freq_res = freqs[1] - freqs[0]  # = 1 / 4 = 0.25
        # Compute the absolute power by approximating the area under the curve
        gamma_power = simps(psd[idx_delta], dx=freq_res)

        # For each patient and electrode print the powers
        print(i,x,delta_power,theta_power,alpha_power,beta_power,gamma_power)
        
